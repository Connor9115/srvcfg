#!/bin/bash
optstring=si:n:
thisScript="${0##*/}" # gets this script's name
installFor="steamcmd"
pathName=""
steamid=""
runScript=""
runcmd=""
steamDir=""
e=0
while getopts $optstring opt; do
  case $opt in
    s) installFor="sans-steamcmd" ;;
    i) steamid=$OPTARG;;
    n) pathName=$OPTARG;;
    *) echo "Incorrect optarg" && exit 1 ;;
  esac
done

# NOTE
# grub-mkconfig -o /boot/grub/grub.cfg
# grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB

# TODO create systemd module version (instead of cron)
# Too lazy to code for other package managers
ls /usr/bin/pacman &>/dev/null
[ $? != 0 ] && echo "Script only works on Arch-based distros"

ls /usr/bin/steamcmd &>/dev/null
if [ $? != 0 ] && [ $installFor = "steamcmd" ]; then
        echo WARNING: steamcmd executable not found in /usr/bin
        # Attempt to find a usable steamcmd executable in user's home
        steamDir = $(find ~/ -perm -700 -type f | grep 'steamcmd/steamcmd$')
        if [ $steamDir = 0 ]; then
                echo -e "Proceeding with steamcmd executable found at\n$steamDir"
        else
                acceptedInstall=0;
                shopt -s nocasematch
                        echo "steamcmd not installed"
                        read -p "Install it now? [Y]es/[n]o: " installDep
                        case $installDep in
                                y | yes | "")
                                        echo "Installing with pacman (expect a sudo prompt)"
                                        acceptedInstall=1;
                                        ;;
                                n | no)
                                        ;;
                        *)
                                echo "Unknown input, assuming no."
                                ;;
                        esac
                shopt -u nocasematch
        fi
fi

echo "Installing with pacman (expect a sudo prompt)"
sudo pacman -Syu dhcpcd dhcp efibootmgr fakeroot grub htop neovim net-tools openssh sudo xdg-user-dirs screen cronie git vi

[ $installFor = "sans-steamcmd" ] && exit

findingSCMD () {
                echo "FYI: The steamcmd executable's containing folder must be steamcmd or installed via your package manager (or AUR for Arch via makepkg -si or an AUR helper)"
                echo "e.g. ~/steamcmd/steamcmd will be found"
                echo "e.g. ~/steamcmd-gmod/steamcmd will not"
}

installSCMD () {
        ls /usr/bin/git &>/dev/null
        if [ $? ]; then
                git clone https://aur.archlinux.org/steamcmd.git
                cd steamcmd/ && makepkg -si
        elif [ ! $? ]; then
                echo "git not installed (needed to download steamcmd from AUR), installing..."
                sudo pacman -Syu git
                git clone https://aur.archlinux.org/steamcmd.git
                cd steamcmd/ && makepkg -si
        fi
}


case $e in
        0)      ;;
        1)
                echo -e "Missing dependency:\nsteamcmd"
                [ ! acceptedInstall ] && findingSCMD && exit 1
                installSCMD
                ;;
        *)
                echo -e "How did we get here?\nAn unknown error has occured\nQuitting..."
                exit 1
                ;;
esac

loopStay=1
while [ $loopStay != 0 ]; do
        loopStay=0
        [ "$pathName" = "" ] && read -p "What should the server name be (will also be the server root directory)?: " pathName
        [[ "$pathName" =~ [[:space:]] ]] && read -p "Can not contain whitespace (press enter to continue)..." && loopStay=1
done

[ "$steamid" = "" ] && read -p "What is the steam app/game id?: " steamid

if [ "$runcmd" = "" ]; then
        echo "steamcmd +force_install_dir ~/$pathName/ +login anonymous +app_update $steamid validate +exit"
        steamcmd +force_install_dir ~/$pathName/ +login anonymous +app_update $steamid validate +exit
        potentialRunScript=$(find ~/$pathName/ -perm -700 -type f | gawk '!/.so/' | gawk '!/.html/' | gawk '!/.pak/' | gawk '!/.txt/' | gawk '!/.ini/' | gawk '!/.bat/')
        echo -e "\n$potentialRunScript" | nl --number-width=1
        echo "Which is the correct server executable?"
        read -p "Line number: " runScript
        runcmd=$(echo "$potentialRunScript" | sed -n "$(echo $runScript)p")
fi

crontab -l > tmpfile
echo -e "\n# The following line has been auto-generated by $thisScript\n* * * * * ~/run_$pathName" >> tmpfile
crontab tmpfile
rm tmpfile

echo '#!/bin/bash' > ~/run_$pathName
echo 'if ! pgrep "screen" && ! pgrep "steamcmd"; then' >> ~/run_$pathName
echo -e "        steamcmd +force_install_dir ~/\'$pathName\'/ +login anonymous +app_update $steamid validate +exit" >> ~/run_$pathName
echo '        wait' >> ~/run_$pathName
echo -e "        screen -L -Logfile ~/\'$pathName\'.log -S \'$pathName\' -d -m ~/\'$pathName\'/\'$runcmd\'" >> ~/run_$pathName
echo 'fi' >> ~/run_$pathName
chmod 700 ~/run_$pathName
